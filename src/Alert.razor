@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Quark.Divs
@using Soenneker.Quark.Buttons
@using Soenneker.Quark.Dtos.Colors
@using Soenneker.Quark.Enums.ButtonTypes

@inherits Soenneker.Quark.Components.Element

<Div Class="alert" @attributes="BuildAttributes()" role="alert" >
    @if (Dismissible)
    {
        <Button Type="@ButtonType.Button" Class="btn-close" OnClick="HandleDismiss" aria-label="Close" ></Button>
    }
    @ChildContent
</Div>

@code {

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public bool Dismissible { get; set; }

    [Parameter]
    public bool Show { get; set; } = true;

    [Parameter]
    public EventCallback OnDismiss { get; set; }

    private string? GetColorClass()
    {
        if (Color.IsTheme)
            return $"alert-{Color.Theme!.Value}";

        return null;
    }

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "alert";
        string? colorClass = GetColorClass();

        baseClasses = $"{baseClasses} {colorClass}";

        if (Dismissible)
            baseClasses = $"{baseClasses} alert-dismissible";

        AppendToClassAttr(attributes, baseClasses);

        if (!Show)
            attributes["style"] = "display: none;";

        return attributes;
    }

    private async Task HandleDismiss()
    {
        Show = false;
        StateHasChanged();

        await OnDismiss.InvokeIfHasDelegate();
    }

}