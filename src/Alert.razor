@using Soenneker.Blazor.Extensions.EventCallback
@using Soenneker.Quark.Divs
@using Soenneker.Quark.Buttons
@using Soenneker.Quark.Components.Builders
@using Soenneker.Quark.Components.Builders.Colors
@using Soenneker.Quark.Enums.ButtonTypes

@inherits Soenneker.Quark.Element

<Div Class="alert" @attributes="BuildAttributes()" role="alert" >
    @if (Dismissible)
    {
        <Button Type="@ButtonType.Button" Class="btn-close" OnClick="HandleDismiss" aria-label="Close" ></Button>
    }
    @ChildContent
</Div>

@code {

    [Parameter]
    public CssValue<ColorBuilder>? Color { get; set; }

    [Parameter]
    public bool Dismissible { get; set; }

    [Parameter]
    public bool Show { get; set; } = true;

    [Parameter]
    public EventCallback OnDismiss { get; set; }

    protected override Dictionary<string, object> BuildAttributes()
    {
        Dictionary<string, object> attributes = base.BuildAttributes();

        var baseClasses = "alert";

        if (Dismissible)
            baseClasses = $"{baseClasses} alert-dismissible";

        AppendToClassAttr(attributes, baseClasses);

        // Handle color styling
        if (Color is not null && !Color.Value.IsEmpty)
        {
            string v = Color.Value.ToString().Trim();

            if (Color.Value.IsCssClass)
            {
                if (v.StartsWith("alert-", StringComparison.Ordinal))
                    AppendToClassAttr(attributes, v);
                else
                    AppendToClassAttr(attributes, $"alert-{v}");
            }
            else
            {
                // Literal CSS value â†’ straight style
                if (!attributes.TryGetValue("style", out var existing))
                    attributes["style"] = $"background-color:{v};border-color:{v};color:white;";
                else
                    attributes["style"] = $"{existing}background-color:{v};border-color:{v};color:white;";
            }
        }

        if (!Show)
        {
            if (!attributes.TryGetValue("style", out var existingStyle))
                attributes["style"] = "display: none;";
            else
                attributes["style"] = $"{existingStyle}display: none;";
        }

        return attributes;
    }

    private async Task HandleDismiss()
    {
        Show = false;
        StateHasChanged();

        await OnDismiss.InvokeIfHasDelegate();
    }

}
